import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Define projectile motion function
def projectile_motion(points):

    # Check if there are at least three points
    if len(points) < 3:
        raise ValueError("Please provide at least three points")

    # Extract the x, y, and z coordinates of the points
    x_coords = [point[0] for point in points]
    y_coords = [point[1] for point in points]
    z_coords = [point[2] for point in points]

    # Calculate the coefficients of the quadratic equation using least squares approximation
    A = np.vstack([np.ones(len(x_coords)), np.array(x_coords), np.array(x_coords)**2]).T
    b = y_coords
    c = np.linalg.lstsq(A, b, rcond=None)[0]

    # Calculate the vertex coordinates (h, k)
    h = -c[1] / (2 * c[2])
    k = c[0] + c[1] * h + c[2] * h**2

    # Calculate the time of flight (t) using the maximum height (k) and velocity (v)
    v = np.sqrt(2 * 9.81 * k)
    t = 2 * v / 9.81

    # Calculate the range (R) using the time of flight (t) and velocity (v)
    R = v * t * np.cos(np.arctan(v / (9.81 * t)))

    # Calculate the target coordinates (target_x, target_y)
    target_x = x_coords[2]
    target_y = c[0] + c[1] * target_x + c[2] * target_x**2

    # Calculate the time steps
    t = np.arange(0, t + 0.01, 0.01)

    # Simulate projectile motion at each time step
    x_values = []
    y_values = []
    z_values = []
    for current_time in t:
        # Calculate x, y, and z positions at the current time
        x_position = x_coords[0] + v * current_time * np.cos(np.arctan(v / (9.81 * t)))
        y_position = c[0] + c[1] * x_position + c[2] * x_position**2 - 0.5 * g * current_time**2
        z_position = z_coords[0] + vz * current_time - 0.5 * g * current_time**2

        # Append the positions to the lists
        x_values.append(x_position)
        y_values.append(y_position)
        z_values.append(z_position)

    # Plot the projectile trajectory
    plt.plot(x_values, z_values, label='Projectile Path')
    plt.scatter(x_coords, z_coords, marker='o', color='red', label='Data Points')

    # Add labels and title
    plt.xlabel('X Position (m)')
    plt.ylabel('Z Position (m)')
    plt.title('Projectile Trajectory')

    # Add legend
    plt.legend()

    # Display the results
    print('Projectile motion equation: y = %.2fx^2 + %.2fx + %.2f' % (c[2], c[1], c[0]))
    print("Item's velocity: %.2f m/s" % v)
    print("Target coordinates: (%.2f, %.2f, %.2f)" % (target_x, target_y, z_values[-1]))
    print("Vertex coordinates: (%.2f, %.2f)" % (h, k))
    print("Range: %.2f m" % R)

# Main function
if __name__ == "__main__":
    # Define the three point

    # Define the three point
    points = []
    for i in range(3):
        x = float(input('Enter x-coordinate for point ' + str(i + 1) + ': '))
        y = float(input('Enter y-coordinate for point ' + str(i + 1) + ': '))
        z = float(input('Enter z-coordinate for point ' + str(i + 1) + ': '))
        points.append((x, y, z))

    # Simulate projectile motion
    projectile_motion(points)
